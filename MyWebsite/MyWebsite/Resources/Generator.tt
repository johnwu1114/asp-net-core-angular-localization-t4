<#@ template  language="C#" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#
	var defaultCulture = "en-gb";
	var path = this.Host.ResolvePath("");
#>
namespace Resources
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text.RegularExpressions;
    using System.Xml.Linq;

<# foreach (var culture in GetResources(path)) { #>
	public class <#= culture.Key #> {  
		private const string _defaultCulture = "<#= defaultCulture #>";
        private const string _resourceFolder = @"Resources";

        private readonly static Dictionary<string, Dictionary<string, string>> _resources;
        private CultureInfo _culture;

        static <#= culture.Key #>()
        {
            if (_resources == null)
            {
                _resources = new Dictionary<string, Dictionary<string, string>>(StringComparer.CurrentCultureIgnoreCase);
                var files = Directory.GetFiles(_resourceFolder, $"{nameof(<#= culture.Key #>)}*.resx");
                foreach (var file in files)
                {
                    var xdoc = XDocument.Load(file);
                    var dictionary = xdoc.Root.Elements("data").ToDictionary(e => e.Attribute("name").Value, e => e.Element("value").Value);
                    _resources.Add(GetCulture(file), dictionary);
                }
            }
        }

        public <#= culture.Key #>(string culture = _defaultCulture)
        {
            _culture = new CultureInfo(culture);
        }

<# foreach (var resource in culture.Value) { #>
		public string <#= resource.Key #> { get { return GetString("<#= resource.Key #>"); } }
<# } #>

        public string GetString(string resourceKey)
        {
            return GetString(resourceKey, _culture.Name);
        }

        public string GetString(string resourceKey, string culture)
        {
            var resource = _resources.ContainsKey(culture) ? _resources[culture] : _resources[_defaultCulture];
            return resource.ContainsKey(resourceKey) ? resource[resourceKey] : resourceKey;
        }

        private static string GetCulture(string path)
        {
            var culturePattern = "[A-Za-z]{2}-[A-Za-z]{2}.resx$";
            var match = Regex.Match(path, culturePattern);
            return match.Value.Replace(".resx", "");
        }
	}
<# } #>
}
<#+
	string defaultCulture = "en-gb";
	Dictionary<string, Dictionary<string, string>> GetResources(string path) {
        var files = Directory.GetFiles(path, "*.resx");
		var resources = files.GroupBy(file =>
			{
				var fileName = Path.GetFileNameWithoutExtension(file).Split('.');
				return fileName.First();
			}).ToDictionary(g => g.Key, g =>
			{
				var defaultFile = g.Single(s => s.IndexOf(defaultCulture, StringComparison.CurrentCultureIgnoreCase) != -1);
				var xdoc = XDocument.Load(defaultFile);
				var dictionary = xdoc.Root.Elements("data").ToDictionary(e => e.Attribute("name").Value, e => e.Element("value").Value);
				return dictionary;
			});
		return resources;
	}
#>